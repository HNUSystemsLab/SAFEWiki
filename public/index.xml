<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>new new new test</title>
    <link>http://example.org/</link>
    <description>Recent content on new new new test</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Mon, 06 Feb 2023 16:43:13 +0800</lastBuildDate><atom:link href="http://example.org/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>My First Post</title>
      <link>http://example.org/posts/my-first-post/</link>
      <pubDate>Mon, 06 Feb 2023 16:43:13 +0800</pubDate>
      
      <guid>http://example.org/posts/my-first-post/</guid>
      <description>halo Hugo it&amp;rsquo;s my first hugo post&amp;hellip;</description>
    </item>
    
    <item>
      <title>Linux内核利用-part 1</title>
      <link>http://example.org/posts/%E5%86%85%E6%A0%B8%E5%AE%89%E5%85%A8-linux%E5%86%85%E6%A0%B8%E5%88%A9%E7%94%A8-part-1/</link>
      <pubDate>Sun, 05 Feb 2023 15:36:08 +0800</pubDate>
      
      <guid>http://example.org/posts/%E5%86%85%E6%A0%B8%E5%AE%89%E5%85%A8-linux%E5%86%85%E6%A0%B8%E5%88%A9%E7%94%A8-part-1/</guid>
      <description>前言 在本系列中，我将介绍过去几周学习的Linux内核利用的一些基本内容：从基本环境配置到流行的Linux内核保护措施，以及相应的利用技术。 当我两年前刚开始学习CTF和pwn时，每次我听到别人提及“内核利用”，我感觉它是个很难又很神奇的东西。我尝试过几次，但由于当时对内核和操作系统缺乏充分了解，一直不知道怎么入门。在学习了更多有关计算机科学，特别是操作系统的知识之后，几个星期前，我再次尝试入门内核pwn。我知道对于pwn选手来说，过了这么久才开始学这个主题真的是很晚了，但就像那句话说的——晚学总比不学好。我后来发现这个主题并不像我原先一直认为的那么难（但它当然也不简单，我只学了一些基础知识），它只是需要比普通用户空间利用更多的初始深入知识和设置。因此，它要求pwn选手在开始内核利用之前要非常熟悉用户级利用。 我使用的是hxpCTF 2020中一个名为kernel-rop的题目提供的环境进行练习。不过我只是使用了该环境，这篇文章并不是题目解析。我选择这个环境的原因是：
环境配置相当典型并且易于根据实践需要进行修改。 内核模块中的漏洞非常基础、简单。 为最新内核版本（截止我写这篇文章时）。 这个系列文章是我可以在将来回顾的模板，如果它也能帮到刚入门Linux内核利用的人，我将非常高兴。 那就让我们开始本系列的第一篇文章吧！我在其中演示了设置Linux内核pwn环境的最基本方法和最基本的利用技术。 配置环境 初探 在Linux内核pwn问题中，我们要在引导时将有漏洞的自定义内核模块安装到内核中并利用它。在大多数情况下，该模块将与一些使用qemu作为Linux系统模拟器的文件一起提供。然而，在一些罕见情况下，我们也可能得到VMWare或VirtualBox虚拟机映像，或者没有任何模拟环境。但以我的经验来说，这非常少见，所以我只介绍由qemu模拟的常见情况。 在本次的kernel-rop问题中，我们得到了很多文件，但只有这些文件对qemu配置有用：
vmlinuz：压缩的Linux内核，有时也被称为bzImage。我们可以将它解压缩到称为vmlinux的实际内核ELF文件中。 initramfs.cpio.gz：用cpio和gzip压缩的Linux文件系统。/bin /etc等目录存储在这个文件中，易受攻击的内核模块也可能在该文件系统中。在其他问题中，该文件可能采用其他压缩方案。 run.sh：包含qemurun命令的shell脚本。qemu和Linux引导配置可以在此处更改。 让我们更深入地研究这些文件，逐一了解我们应该如何处理它们。 内核 Linux内核通常以vmlinuz或bzImage的名称给出，它是称为vmlinux的内核映像的压缩版本。可以使用gzip、bzip2、lzma等不同的压缩方案。我在这里使用extract-image.sh脚本来提取内核ELF文件：
$ ./extract-image.sh ./vmlinuz &amp;gt; vmlinux 提取内核映像是为了在其中找到ROP配件。如果你熟悉用户级pwn，那么你就知道什么是ROP，它在内核中没有什么不同（我们将在后面看到）。我个人更喜欢使用ROPgadget来做这项工作：
$ ROPgadget --binary ./vmlinux &amp;gt; gadgets.txt 与简单的用户级程序不同，内核映像很大。因此，你将等很长时间，ROPgadget才能找到所有配件。所以在开始时就立即进行查找比较好。同时应该将输出保存到一个文件中以免多次运行ROPgadget来查找不同的配件。
文件系统 同样，这是一个压缩文件，我使用脚本decompress.sh进行解压：
mkdir initramfs cd initramfs cp ../initramfs.cpio.gz . gunzip ./initramfs.cpio.gz cpio -idm &amp;lt; ./initramfs.cpio rm initramfs.cpio 运行脚本后得到目录initramfs，它看起来像Linux机器上文件系统的根目录。我们看到易受攻击的内核模块hackme.ko也包含在根目录中。我们将把它复制到其他地方，稍后进行分析。 解压这个文件不仅可以获得易受攻击的模块，还可以根据我们的需要修改文件系统中的某些内容。 首先，我们可以查看/etc目录，因为大多数引导后运行的初始化脚本都存储在这里。我们在其中一个文件（通常是rcS或inittab）中查找以下行，然后修改它：
setuidgid 1000 /bin/sh # Modify it into the following setuidgid 0 /bin/sh 这一行代码的目的是在引导后生成一个UID为1000的非根shell。将UID修改为0之后，我们将在启动时得到一个根shell。你也许想问：我们为什么要这样做？实际上，这看起来相当矛盾。因为我们的目标是利用内核模块来获得根权限，而不是修改文件系统（当然，我们不能修改题目的远程服务器上的文件系统）。这里的根本原因只是为了简化利用过程。在使用利用代码时，有些文件包含对我们有用的信息，但它们需要root权限来读取。例如：
/proc/kallsyms列出了加载到内核中的所有符号的地址 /sys/module/core/sections/.text显示了内核的.text部分的地址，这也是它的基址（本题中没有/sys目录，但可以从/proc/kallsyms中检索基址）。 运行利用代码时要记得改回1000，以免利用时误报（你以为得到了根shell，其实并没有)。</description>
    </item>
    
    <item>
      <title>My First Post</title>
      <link>http://example.org/posts/heap-1-malloc_chunk/</link>
      <pubDate>Sun, 05 Feb 2023 15:36:08 +0800</pubDate>
      
      <guid>http://example.org/posts/heap-1-malloc_chunk/</guid>
      <description>认识malloc_chunck 此结构用于表示特定的内存块。在程序执行中，我们称malloc申请的内存为chunk，用malloc_chunk结构来表示，当程序申请的chunk被free后，会被加入到对应的空闲chunk管理队列。无论chunk的大小、状态如何，他们都是使用同一数据结构malloc_chunk，只不过是各个字段对于不同类型的chunk具有不同的含义。
认识malloc_chunck 1 malloc chunk结构定义 1.1 字段说明 1.1.1 mchunk_prev_size 1.1.2 mchunk_size 1.1.3 fd,bk 1.1.4 fd_nextsize,bk_nextsize 2 chunk类型 2.1 allocated chunk 2.2 free chunk 3 参考资料 1 malloc chunk结构定义 struct malloc_chunk { INTERNAL_SIZE_T mchunk_prev_size; /* Size of previous chunk, if it is free. */ INTERNAL_SIZE_T mchunk_size; /* Size in bytes, including overhead. */ struct malloc_chunk* fd; /* double links -- used only if this chunk is free. */ struct malloc_chunk* bk; /* Only used for large blocks: pointer to next larger size.</description>
    </item>
    
    <item>
      <title>My First Post</title>
      <link>http://example.org/posts/heap-2-malloc_state/</link>
      <pubDate>Sun, 05 Feb 2023 15:36:08 +0800</pubDate>
      
      <guid>http://example.org/posts/heap-2-malloc_state/</guid>
      <description>&lt;h2 id=&#34;malloc_state&#34;&gt;malloc_state&lt;/h2&gt;</description>
    </item>
    
    <item>
      <title>My First Post</title>
      <link>http://example.org/posts/heap-3-bins_and_chunks/</link>
      <pubDate>Sun, 05 Feb 2023 15:36:08 +0800</pubDate>
      
      <guid>http://example.org/posts/heap-3-bins_and_chunks/</guid>
      <description>bins和chunks bin 是由free chunk（未分配）组成的列表（双向或单向链表）。Bins 根据其包含的块的大小被分为以下4类：
Fast bin Unsorted bin Small bin Large bin Fast bins 使用以下方法声明：
typedef struct malloc_chunk *mfastbinptr; mfastbinptr fastbinsY[]; // Array of pointers to chunks Unsorted、small和large Bins使用以下方式声明：
typedef struct malloc_chunk* mchunkptr; mchunkptr bins[]; // Array of pointers to chunks 最初，在初始化过程中，small和large bin为空。每个bin由 bins 数组中的两个值表示，第一个值是指向“HEAD”的指针，第二个值是指向“TAIL”的指针。对于fast bin（单向链表），第二个值会设为 NULL。
Fast bins 共有10个fast bin，每一个bin都是一个单向链表，fast bins中的块叫做fast chunk。对链表的添加和删除操作都是从链表尾进行，遵循LIFO算法。
每个bin中的chunk大小都是相同的。10 个bin中包含的chunk的大小有：16、24、32、40、48、56、64、72、80 和 88字节，此处提到的大小也包括元数据。在指针大小为 4 个字节的平台上，将会提供不超过4个字节的空间来存储chunk。该chunk的prev_size和size字段将保存已分配区块的元数据。下一个连续区块prev_size将保存用户数据。
两个连续的空闲fast chunk不会合并在一起。
Unsorted bin 只有1个unsorted bin。在大型chunk或者小型chunk释放后，会进入这个bin当中。此 bin 的主要用途是充当缓存层（某种）以加快分配和取消分配请求的速度。
Small bins 共有62个small bin，small bins的块就叫做small chunks。就内存的分配和释放速度而言，small bins的速度要比large bins快，但比fast bins慢。每一个small bin都是双向链表，采用FIFO（先入先出）算法，插入操作发生在“头部”，而删除发生在“尾部”（以FIFO方式）。</description>
    </item>
    
    <item>
      <title>My First Post</title>
      <link>http://example.org/posts/heap-4-internal-functions/</link>
      <pubDate>Sun, 05 Feb 2023 15:36:08 +0800</pubDate>
      
      <guid>http://example.org/posts/heap-4-internal-functions/</guid>
      <description>internal function 这是内部使用的一些常用函数的列表。要注意的是，某些函数实际上是使用 #define 指令定义的。因此，对调用参数的更改实际上在调用操作之后会保留。然后假定没有设置MALLOC_DEBUG。
arena_get (ar_ptr, size) 首先获取一块区域然后把相对应的互斥锁锁住。然后ar_ptr指针指向相应的区域。Size参数只是表明要占用多少内存。
Sysmalloc [TODO] Sysmalloc需要系统用malloc函数分配更多的内存 在使用的时候假设av-&amp;gt;top的空间并不够请求nb字节，因此需要延长或者替换av-&amp;gt;top.
void alloc_perturb (char *p, size_t n) 如果 perturb_byte（使用 M_PERTURB 的 malloc 的可调参数）不为零（默认情况下为 0），则修改 p 指向的 n 个字节的内容，使其与perturb_byte ^ 0xff相等。
void free_perturb (char *p, size_t n) 如果 perturb_byte（使用 M_PERTURB 的 malloc 的可调参数）不为零（默认情况下为 0），则修改 p 指向的 n 个字节的内容，使其与 perturb_byte相等。
void malloc_init_state (mstate av) 初始化malloc_state结构。这仅从内部调用malloc_consolidate函数（malloc_consolidate需要在相同环境被调用）它从不在 malloc _ merge之外直接调用，因为一些编译器试图在所有调用点对他进行内联操作，反而造成了负优化的后果。（虽然将它内联在malloc_consolidate中很棒就是了） 1.对于不是fastbin的bins来说，需要为每个bin创建一个空循环链表 2.为av 设置FASTCHUNKS_BIT的flag参数 3.把av-&amp;gt;top初始化为第一个未经过排序的chunk
unlink(AV, P, BK, FD) 定义一个宏指令从而从bin中删除一个chunk 1.检查chunk的大小是否和下一个chunk里之前设置的大小相等，否则的话将显示&amp;quot;corrupted size vs. prev_size&amp;quot;错误 2.</description>
    </item>
    
    <item>
      <title>My First Post</title>
      <link>http://example.org/posts/heap-5-core-functions/</link>
      <pubDate>Sun, 05 Feb 2023 15:36:08 +0800</pubDate>
      
      <guid>http://example.org/posts/heap-5-core-functions/</guid>
      <description>核心函数 1 void *_init_malloc(mstate av,size_t bytes) 1.1 更新bytes以处理对齐等。
1.2 检查av是否为NULL。
1.3 在没有可用分区的情况下（av为NULL），调用sysmalloc来使用mmap获取chunk。如果成功，将调用alloc_perturb，然后返回指针。
1.4 A. 如果要申请的chunk大小在fast bin范围内，则：
① 获取fast bin数组的索引，从而根据请求大小访问合适的bin。 ② 删除该bin中的第一个chunk并让victim指向它。 ③ 如果victim为NULL，则转到情况B. ④ 如果victim不为NULL，检查chunk的大小以确保它属于该特定的bin。否则会抛出错误（&amp;quot;malloc():memory corruption(fast)&amp;quot;） ⑤ 调用alloc_perturb然后返回指针。
B. 如果大小落在small bin范围内：
① 获取small bin数组的索引，以根据请求大小访问合适的bin。 ② 如果这个bin中没有chunk（通过比较指针bin和bin-&amp;gt;bk来检查），则继续执行情况C。 ③ victim等于bin-&amp;gt;bk(bin中的最后一个chunk)。如果它为NULL（在此期间发生初始化），则调用malloc_consolidate并跳过检查不同bin的完整步骤。 ④ 否则，当victim不为NULL时，检查victim-&amp;gt;bk-&amp;gt;fd和victim是否相等。如果它们不相等，则抛出错误&amp;quot;malloc(): smallbin double linked list corrupted&amp;quot;. ⑤ 为victim的下一个chunk（在内存中，而不是在双向链表中）设置PREV_INSUE位。 ⑥ 从bin列表中删除这个chunk。 ⑦ 根据av为这个chunk设置适当的分区位。 ⑧ 调用alloc_perturb然后返回指针。
C. 如果大小不在smallbin范围内：
① 获取largebin数组的索引以根据请求大小访问合适的bin。 ② 看av有没有fastchunks。这是通过检查av-&amp;gt;flags中的FASTCHUNKS_BIT来完成的。如果是这样，调用av上的malloc_consolidate.
1.5 如果还没有返回任何指针，则意味着以下一种或多种情况：
① 大小落在fast bin范围但没有可用的fastchunk。 ② 大小落在small bin范围但没有可用的smallchunk（在初始化期间调用malloc_consolidate）。 ③ 大小落在large bin范围内。</description>
    </item>
    
    <item>
      <title>My First Post</title>
      <link>http://example.org/posts/heap-6-security-checks/</link>
      <pubDate>Sun, 05 Feb 2023 15:36:08 +0800</pubDate>
      
      <guid>http://example.org/posts/heap-6-security-checks/</guid>
      <description>Security Checks 这里总结了 glibc 实现中引入的安全检查，用于检测和防止与堆相关的攻击。
函数 安全检查 错误 unlink 区块大小是否等于下一个区块（在内存中）中设置的先前大小 corrupted size vs. prev_size unlink 验证P-&amp;gt;fd-&amp;gt;bk == P和P-&amp;gt;bk-&amp;gt;fd == P*是否成立 双链表损坏 _int_malloc 从 fastbin 中删除第一个区块（为 malloc 请求提供服务）时，检查区块的大小是否在快速区块大小范围内 malloc(): memory corruption(fast) _int_malloc 从小垃圾箱中删除最后一个块（victim）时（为 malloc 请求提供服务），检查victim-&amp;gt;bk-&amp;gt;fd 和victim是否相等 malloc(): 小箱双链表已损坏 _int_malloc 在未排序的 bin 中迭代时，检查当前块的大小是否在最小 （2*SIZE_SZ） 和最大 （av-&amp;gt;system_mem） 范围内 malloc(): memory corruption _int_malloc 将最后一个剩余块插入未排序的 bin 时（拆分大块后），检查unsorted_chunks(av)-&amp;gt;fd-&amp;gt;bk == unsorted_chunks(av) 是否成立 malloc(): unsorted chunks 损坏 _int_malloc 将最后一个剩余块插入未排序的 bin 时（拆分快速或小块后），检查unsorted_chunks(av)-&amp;gt;fd-&amp;gt;bk == unsorted_chunks(av) 是否成立 malloc(): unsorted chunks 2 损坏 _int_free 检查内存中 p** 是否在 p + chunksize（p） 之前（以避免包装） free(): 无效指针 _int_free 检查块的大小是否为 MINSIZE 或 MALLOC_ALIGNMENT 的倍数 free(): 无效size _int_free 对于大小在 fastbin 范围内的区块，检查下一个区块的大小是否介于最小和最大大小 （av-&amp;gt;system_mem） 之间 free(): 下一个size无效(fast) _int_free 将快速块插入快速箱（在 HEAD 处）时，检查已经在 HEAD 上的块是否不同 double free 或者是 corruption (fasttop) _int_free 将快速块插入 fastbin 时（在 HEAD 处），检查 HEAD 处的块大小是否与要插入的块相同 无效 fastbin 入口 (free) _int_free 如果块不在 fastbin 的大小范围内，也不是映射的块，请检查它是否与顶部块不同 double free 或者是 corruption (top) _int_free 检查下一个块（按内存）是否在 Arena 的边界内 double free 或者是 corruption (out) _int_free 检查下一个块（按内存）的先前使用位是否被标记 double free 或者是 corruption (!</description>
    </item>
    
  </channel>
</rss>
